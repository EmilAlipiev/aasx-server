name: Build-and-package-release-workflow

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  Build-and-package-release:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set execution policy
        shell: pwsh
        run: Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process

      - name: Infer the version from the GitHub ref
        id: inferVersion
        working-directory: src
        run: |
          $version = .\BuildVersionNumber.ps1 -suffix alpha
          Write-Host "Inferred version: $version"
          echo "version=$version" >> $GITHUB_ENV
        shell: pwsh

      - name: Install .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Build for release
        working-directory: src
        run: .\BuildForRelease.ps1
        shell: pwsh

      - name: Update version numbers in project
        working-directory: src
        run: |
          $version = '${{ env.version }}'
          Write-Host "Updating project versions to: $version"
          .\UpdateProjectVersions.ps1 -version $version
        shell: pwsh

      - name: Package the release
        working-directory: src
        run: |
          $version = '${{ env.version }}'
          Write-Host "Packaging for the release version: $version"
          .\PackageRelease.ps1 -version $version
        shell: pwsh

      - name: Rename the release assets
        working-directory: .
        run: |
          $version = '${{ env.version }}'
          $releaseDir = Join-Path $(Get-Location) "artefacts\release\$version"
          Write-Host "Release directory: $releaseDir"

          if (!(Test-Path $releaseDir)) {
              throw "The release directory does not exist: $releaseDir"
          }

          $archives = Get-ChildItem $releaseDir -Filter *.zip
          foreach($archive in $archives) {
              $path = $archive.FullName
              Write-Host "The path to the archive is: $path"

              $nameWoExt = [io.path]::GetFileNameWithoutExtension($path)
              Write-Host "The name without extension is: $nameWoExt"

              $target = Join-Path $releaseDir ($nameWoExt + "." + $version + ".zip")
              Write-Host "Moving: $path -> $target"
              Move-Item -Path $path -Destination $target
          }
        shell: pwsh

      - name: Verify the release assets
        working-directory: .
        run: |
          $version = '${{ env.version }}'
          $releaseDir = Join-Path $(Get-Location) "artefacts\release\$version"
          Write-Host "Verifying contents of the release directory: $releaseDir"
          Get-ChildItem $releaseDir

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.version }}"
          release_name: "Release v${{ env.version }}"
          draft: false
          prerelease: false

      - name: Upload the release assets
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artefacts/release/${{ env.version }}/*.zip
          asset_name: ${{ env.version }}.zip
          asset_content_type: application/zip
